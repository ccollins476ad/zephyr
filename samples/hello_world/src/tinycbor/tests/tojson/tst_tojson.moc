/****************************************************************************
** Meta object code from reading C++ file 'tst_tojson.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_tojson.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_ToJson_t {
    QByteArrayData data[39];
    char stringdata0[633];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_ToJson_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_ToJson_t qt_meta_stringdata_tst_ToJson = {
    {
QT_MOC_LITERAL(0, 0, 10), // "tst_ToJson"
QT_MOC_LITERAL(1, 11, 12), // "initTestCase"
QT_MOC_LITERAL(2, 24, 0), // ""
QT_MOC_LITERAL(3, 25, 10), // "fixed_data"
QT_MOC_LITERAL(4, 36, 5), // "fixed"
QT_MOC_LITERAL(5, 42, 16), // "textstrings_data"
QT_MOC_LITERAL(6, 59, 11), // "textstrings"
QT_MOC_LITERAL(7, 71, 12), // "nonjson_data"
QT_MOC_LITERAL(8, 84, 7), // "nonjson"
QT_MOC_LITERAL(9, 92, 16), // "bytestrings_data"
QT_MOC_LITERAL(10, 109, 11), // "bytestrings"
QT_MOC_LITERAL(11, 121, 20), // "emptyContainers_data"
QT_MOC_LITERAL(12, 142, 15), // "emptyContainers"
QT_MOC_LITERAL(13, 158, 11), // "arrays_data"
QT_MOC_LITERAL(14, 170, 6), // "arrays"
QT_MOC_LITERAL(15, 177, 17), // "nestedArrays_data"
QT_MOC_LITERAL(16, 195, 12), // "nestedArrays"
QT_MOC_LITERAL(17, 208, 9), // "maps_data"
QT_MOC_LITERAL(18, 218, 4), // "maps"
QT_MOC_LITERAL(19, 223, 15), // "nestedMaps_data"
QT_MOC_LITERAL(20, 239, 10), // "nestedMaps"
QT_MOC_LITERAL(21, 250, 21), // "nonStringKeyMaps_data"
QT_MOC_LITERAL(22, 272, 16), // "nonStringKeyMaps"
QT_MOC_LITERAL(23, 289, 18), // "tagsToObjects_data"
QT_MOC_LITERAL(24, 308, 13), // "tagsToObjects"
QT_MOC_LITERAL(25, 322, 30), // "taggedByteStringsToBase16_data"
QT_MOC_LITERAL(26, 353, 25), // "taggedByteStringsToBase16"
QT_MOC_LITERAL(27, 379, 30), // "taggedByteStringsToBase64_data"
QT_MOC_LITERAL(28, 410, 25), // "taggedByteStringsToBase64"
QT_MOC_LITERAL(29, 436, 30), // "taggedByteStringsToBigNum_data"
QT_MOC_LITERAL(30, 467, 25), // "taggedByteStringsToBigNum"
QT_MOC_LITERAL(31, 493, 14), // "otherTags_data"
QT_MOC_LITERAL(32, 508, 9), // "otherTags"
QT_MOC_LITERAL(33, 518, 13), // "metaData_data"
QT_MOC_LITERAL(34, 532, 8), // "metaData"
QT_MOC_LITERAL(35, 541, 29), // "metaDataAndTagsToObjects_data"
QT_MOC_LITERAL(36, 571, 24), // "metaDataAndTagsToObjects"
QT_MOC_LITERAL(37, 596, 20), // "metaDataForKeys_data"
QT_MOC_LITERAL(38, 617, 15) // "metaDataForKeys"

    },
    "tst_ToJson\0initTestCase\0\0fixed_data\0"
    "fixed\0textstrings_data\0textstrings\0"
    "nonjson_data\0nonjson\0bytestrings_data\0"
    "bytestrings\0emptyContainers_data\0"
    "emptyContainers\0arrays_data\0arrays\0"
    "nestedArrays_data\0nestedArrays\0maps_data\0"
    "maps\0nestedMaps_data\0nestedMaps\0"
    "nonStringKeyMaps_data\0nonStringKeyMaps\0"
    "tagsToObjects_data\0tagsToObjects\0"
    "taggedByteStringsToBase16_data\0"
    "taggedByteStringsToBase16\0"
    "taggedByteStringsToBase64_data\0"
    "taggedByteStringsToBase64\0"
    "taggedByteStringsToBigNum_data\0"
    "taggedByteStringsToBigNum\0otherTags_data\0"
    "otherTags\0metaData_data\0metaData\0"
    "metaDataAndTagsToObjects_data\0"
    "metaDataAndTagsToObjects\0metaDataForKeys_data\0"
    "metaDataForKeys"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_ToJson[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      37,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  199,    2, 0x08 /* Private */,
       3,    0,  200,    2, 0x08 /* Private */,
       4,    0,  201,    2, 0x08 /* Private */,
       5,    0,  202,    2, 0x08 /* Private */,
       6,    0,  203,    2, 0x08 /* Private */,
       7,    0,  204,    2, 0x08 /* Private */,
       8,    0,  205,    2, 0x08 /* Private */,
       9,    0,  206,    2, 0x08 /* Private */,
      10,    0,  207,    2, 0x08 /* Private */,
      11,    0,  208,    2, 0x08 /* Private */,
      12,    0,  209,    2, 0x08 /* Private */,
      13,    0,  210,    2, 0x08 /* Private */,
      14,    0,  211,    2, 0x08 /* Private */,
      15,    0,  212,    2, 0x08 /* Private */,
      16,    0,  213,    2, 0x08 /* Private */,
      17,    0,  214,    2, 0x08 /* Private */,
      18,    0,  215,    2, 0x08 /* Private */,
      19,    0,  216,    2, 0x08 /* Private */,
      20,    0,  217,    2, 0x08 /* Private */,
      21,    0,  218,    2, 0x08 /* Private */,
      22,    0,  219,    2, 0x08 /* Private */,
      23,    0,  220,    2, 0x08 /* Private */,
      24,    0,  221,    2, 0x08 /* Private */,
      25,    0,  222,    2, 0x08 /* Private */,
      26,    0,  223,    2, 0x08 /* Private */,
      27,    0,  224,    2, 0x08 /* Private */,
      28,    0,  225,    2, 0x08 /* Private */,
      29,    0,  226,    2, 0x08 /* Private */,
      30,    0,  227,    2, 0x08 /* Private */,
      31,    0,  228,    2, 0x08 /* Private */,
      32,    0,  229,    2, 0x08 /* Private */,
      33,    0,  230,    2, 0x08 /* Private */,
      34,    0,  231,    2, 0x08 /* Private */,
      35,    0,  232,    2, 0x08 /* Private */,
      36,    0,  233,    2, 0x08 /* Private */,
      37,    0,  234,    2, 0x08 /* Private */,
      38,    0,  235,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_ToJson::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_ToJson *_t = static_cast<tst_ToJson *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->initTestCase(); break;
        case 1: _t->fixed_data(); break;
        case 2: _t->fixed(); break;
        case 3: _t->textstrings_data(); break;
        case 4: _t->textstrings(); break;
        case 5: _t->nonjson_data(); break;
        case 6: _t->nonjson(); break;
        case 7: _t->bytestrings_data(); break;
        case 8: _t->bytestrings(); break;
        case 9: _t->emptyContainers_data(); break;
        case 10: _t->emptyContainers(); break;
        case 11: _t->arrays_data(); break;
        case 12: _t->arrays(); break;
        case 13: _t->nestedArrays_data(); break;
        case 14: _t->nestedArrays(); break;
        case 15: _t->maps_data(); break;
        case 16: _t->maps(); break;
        case 17: _t->nestedMaps_data(); break;
        case 18: _t->nestedMaps(); break;
        case 19: _t->nonStringKeyMaps_data(); break;
        case 20: _t->nonStringKeyMaps(); break;
        case 21: _t->tagsToObjects_data(); break;
        case 22: _t->tagsToObjects(); break;
        case 23: _t->taggedByteStringsToBase16_data(); break;
        case 24: _t->taggedByteStringsToBase16(); break;
        case 25: _t->taggedByteStringsToBase64_data(); break;
        case 26: _t->taggedByteStringsToBase64(); break;
        case 27: _t->taggedByteStringsToBigNum_data(); break;
        case 28: _t->taggedByteStringsToBigNum(); break;
        case 29: _t->otherTags_data(); break;
        case 30: _t->otherTags(); break;
        case 31: _t->metaData_data(); break;
        case 32: _t->metaData(); break;
        case 33: _t->metaDataAndTagsToObjects_data(); break;
        case 34: _t->metaDataAndTagsToObjects(); break;
        case 35: _t->metaDataForKeys_data(); break;
        case 36: _t->metaDataForKeys(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_ToJson::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_ToJson.data,
      qt_meta_data_tst_ToJson,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_ToJson::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_ToJson::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_ToJson.stringdata0))
        return static_cast<void*>(const_cast< tst_ToJson*>(this));
    return QObject::qt_metacast(_clname);
}

int tst_ToJson::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 37)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 37;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 37)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 37;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
