/****************************************************************************
** Meta object code from reading C++ file 'tst_encoder.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.1)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_encoder.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.1. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_tst_Encoder_t {
    QByteArrayData data[26];
    char stringdata0[327];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_tst_Encoder_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_tst_Encoder_t qt_meta_stringdata_tst_Encoder = {
    {
QT_MOC_LITERAL(0, 0, 11), // "tst_Encoder"
QT_MOC_LITERAL(1, 12, 10), // "fixed_data"
QT_MOC_LITERAL(2, 23, 0), // ""
QT_MOC_LITERAL(3, 24, 5), // "fixed"
QT_MOC_LITERAL(4, 30, 12), // "strings_data"
QT_MOC_LITERAL(5, 43, 7), // "strings"
QT_MOC_LITERAL(6, 51, 18), // "arraysAndMaps_data"
QT_MOC_LITERAL(7, 70, 13), // "arraysAndMaps"
QT_MOC_LITERAL(8, 84, 9), // "tags_data"
QT_MOC_LITERAL(9, 94, 4), // "tags"
QT_MOC_LITERAL(10, 99, 11), // "arrays_data"
QT_MOC_LITERAL(11, 111, 6), // "arrays"
QT_MOC_LITERAL(12, 118, 9), // "maps_data"
QT_MOC_LITERAL(13, 128, 4), // "maps"
QT_MOC_LITERAL(14, 133, 16), // "shortBuffer_data"
QT_MOC_LITERAL(15, 150, 11), // "shortBuffer"
QT_MOC_LITERAL(16, 162, 19), // "tooShortArrays_data"
QT_MOC_LITERAL(17, 182, 14), // "tooShortArrays"
QT_MOC_LITERAL(18, 197, 17), // "tooShortMaps_data"
QT_MOC_LITERAL(19, 215, 12), // "tooShortMaps"
QT_MOC_LITERAL(20, 228, 17), // "tooBigArrays_data"
QT_MOC_LITERAL(21, 246, 12), // "tooBigArrays"
QT_MOC_LITERAL(22, 259, 15), // "tooBigMaps_data"
QT_MOC_LITERAL(23, 275, 10), // "tooBigMaps"
QT_MOC_LITERAL(24, 286, 22), // "illegalSimpleType_data"
QT_MOC_LITERAL(25, 309, 17) // "illegalSimpleType"

    },
    "tst_Encoder\0fixed_data\0\0fixed\0"
    "strings_data\0strings\0arraysAndMaps_data\0"
    "arraysAndMaps\0tags_data\0tags\0arrays_data\0"
    "arrays\0maps_data\0maps\0shortBuffer_data\0"
    "shortBuffer\0tooShortArrays_data\0"
    "tooShortArrays\0tooShortMaps_data\0"
    "tooShortMaps\0tooBigArrays_data\0"
    "tooBigArrays\0tooBigMaps_data\0tooBigMaps\0"
    "illegalSimpleType_data\0illegalSimpleType"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_tst_Encoder[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      24,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,  134,    2, 0x08 /* Private */,
       3,    0,  135,    2, 0x08 /* Private */,
       4,    0,  136,    2, 0x08 /* Private */,
       5,    0,  137,    2, 0x08 /* Private */,
       6,    0,  138,    2, 0x08 /* Private */,
       7,    0,  139,    2, 0x08 /* Private */,
       8,    0,  140,    2, 0x08 /* Private */,
       9,    0,  141,    2, 0x08 /* Private */,
      10,    0,  142,    2, 0x08 /* Private */,
      11,    0,  143,    2, 0x08 /* Private */,
      12,    0,  144,    2, 0x08 /* Private */,
      13,    0,  145,    2, 0x08 /* Private */,
      14,    0,  146,    2, 0x08 /* Private */,
      15,    0,  147,    2, 0x08 /* Private */,
      16,    0,  148,    2, 0x08 /* Private */,
      17,    0,  149,    2, 0x08 /* Private */,
      18,    0,  150,    2, 0x08 /* Private */,
      19,    0,  151,    2, 0x08 /* Private */,
      20,    0,  152,    2, 0x08 /* Private */,
      21,    0,  153,    2, 0x08 /* Private */,
      22,    0,  154,    2, 0x08 /* Private */,
      23,    0,  155,    2, 0x08 /* Private */,
      24,    0,  156,    2, 0x08 /* Private */,
      25,    0,  157,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void tst_Encoder::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        tst_Encoder *_t = static_cast<tst_Encoder *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->fixed_data(); break;
        case 1: _t->fixed(); break;
        case 2: _t->strings_data(); break;
        case 3: _t->strings(); break;
        case 4: _t->arraysAndMaps_data(); break;
        case 5: _t->arraysAndMaps(); break;
        case 6: _t->tags_data(); break;
        case 7: _t->tags(); break;
        case 8: _t->arrays_data(); break;
        case 9: _t->arrays(); break;
        case 10: _t->maps_data(); break;
        case 11: _t->maps(); break;
        case 12: _t->shortBuffer_data(); break;
        case 13: _t->shortBuffer(); break;
        case 14: _t->tooShortArrays_data(); break;
        case 15: _t->tooShortArrays(); break;
        case 16: _t->tooShortMaps_data(); break;
        case 17: _t->tooShortMaps(); break;
        case 18: _t->tooBigArrays_data(); break;
        case 19: _t->tooBigArrays(); break;
        case 20: _t->tooBigMaps_data(); break;
        case 21: _t->tooBigMaps(); break;
        case 22: _t->illegalSimpleType_data(); break;
        case 23: _t->illegalSimpleType(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject tst_Encoder::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_tst_Encoder.data,
      qt_meta_data_tst_Encoder,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *tst_Encoder::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *tst_Encoder::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_tst_Encoder.stringdata0))
        return static_cast<void*>(const_cast< tst_Encoder*>(this));
    return QObject::qt_metacast(_clname);
}

int tst_Encoder::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 24)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 24;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 24)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 24;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
